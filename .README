# Proyecto de Testing con Playwright

Este proyecto utiliza https://playwright.dev/ para realizar pruebas automatizadas. A continuaci√≥n, se describen los pasos para configurar el entorno desde cero en Windows y ejecutar un primer test de prueba.

## üöÄ Requisitos previos

Antes de empezar, aseg√∫rate de tener instalado lo siguiente:

- Node.js y npm: https://nodejs.org/ (npm viene incluido con Node.js)
- Visual Studio Code: https://code.visualstudio.com/
- Plugin de VS Code: Playwright Test for VS Code

## üõ†Ô∏è Inicializaci√≥n del Proyecto

1. Inicializa un nuevo proyecto de Playwright

Abre una terminal en la carpeta de tu proyecto y ejecuta:

npm init playwright@latest

Durante la instalaci√≥n, Playwright te har√° algunas preguntas:

- Selecciona el lenguaje (JavaScript o TypeScript)
- Selecciona el entorno (Node.js)
- Elige los navegadores que deseas instalar (Chromium, Firefox, WebKit)
- Si quieres incluir ejemplos de prueba (puedes decir que s√≠ para empezar con algo b√°sico)

2. Abre el proyecto en Visual Studio Code

Aseg√∫rate de tener el plugin ‚ÄúPlaywright Test for VS Code‚Äù instalado para acceder a funcionalidades como correr pruebas desde la interfaz.

## üß™ Ejecutar el primer test

Si instalaste los ejemplos, deber√≠as tener un archivo como tests/example.spec.js.

üöÄ Para correr las pruebas:

npx playwright test

üöÄ Tambi√©n puedes usar el bot√≥n ‚ÄúRun Test‚Äù en VS Code si tienes el plugin instalado.

üöÄ Para correr un test especifico una opcion es indicarle su ruta exacta:

`npx playwright test tests/specs/01-login.spec.ts `

üöÄ Playwright permite correr por el t√≠tulo del test:

`npx playwright test -g "should login successfully with standard user"`

üöÄ Esto permite escribir una descripcion generica de la suite en el test.describe y asi correr mediante esa descripcion:

test.describe('Login scenarios', () => {
  ...
});

npx playwright test -g "Login scenarios"

üöÄ Si quieres correr multiples archivos relacionados con login, puedes organizarlo por carpeta:

tests/
‚îú‚îÄ‚îÄ login/
‚îÇ   ‚îî‚îÄ‚îÄ login.spec.ts
‚îú‚îÄ‚îÄ inventory/
‚îÇ   ‚îî‚îÄ‚îÄ inventory.spec.ts

npx playwright test tests/login

üöÄ Por ultimo si quieres correr los test marcados con .only:

test.only('should login with valid user', async ({ loginPage }) => {
  ...
});

npx playwright test

### Visualizar reporte HTML interactivo

Si quieres ver un reporte visual, corre:
npx playwright show-report

Esto abrir√° tu navegador predeterminado con un reporte muy claro de:

- Cada test ejecutado
- Duraci√≥n
- Screenshots (si los capturas)
- Video (si est√° configurado)
- Stacktrace en caso de fallos

Tambi√©n puedes acceder manualmente al archivo generado en la carpeta: playwright-report/index.html

### üåê Ejecutar los tests solo en Chromium
Por defecto, Playwright ejecuta los tests en Chromium, Firefox y WebKit. Si deseas correr los tests √∫nicamente en Chromium, tienes dos opciones:

#### üîß Opci√≥n 1: Configurar playwright.config.ts
Abre el archivo playwright.config.ts y reemplaza el bloque projects por el siguiente:

```
import { defineConfig, devices } from '@playwright/test';

export default defineConfig({
  testDir: './tests',
  projects: [
    {
      name: 'chromium',
      use: {
        ...devices['Desktop Chrome'],
      },
    },
  ],
});
```
#### üñ•Ô∏è Opci√≥n 2: Ejecutar directamente desde CLI
Si prefieres mantener la configuraci√≥n con varios navegadores, puedes ejecutar tus pruebas en Chromium con el siguiente comando:
npx playwright test --project=chromium

## üëÄ Modo Headless vs. Headed

Por defecto, Playwright ejecuta las pruebas en **modo headless**, lo que significa que los navegadores se abren en segundo plano (sin interfaz gr√°fica visible). Esto hace que las pruebas sean m√°s r√°pidas y se usen menos recursos.

Si deseas **ver el navegador mientras se ejecutan los tests** (modo headed), puedes desactivar el modo headless con este comando:

``` bash
npx playwright test --headed
```

Esto es √∫til para depurar visualmente lo que ocurre durante la ejecuci√≥n.

Tambi√©n puedes configurarlo permanentemente en el archivo playwright.config.ts:

use: {
  headless: false,
}

Nota: Para entornos CI/CD, es recomendable mantener headless: true por eficiencia.

## üìÅ Estructura del repositorio

nombre-del-proyecto/
‚îú‚îÄ‚îÄ tests/                  # Carpeta que contiene los archivos de prueba (.spec.js)
‚îú‚îÄ‚îÄ playwright.config.js    # Archivo de configuraci√≥n de Playwright
‚îú‚îÄ‚îÄ package.json            # Informaci√≥n del proyecto y scripts de npm
‚îú‚îÄ‚îÄ node_modules/           # Dependencias instaladas autom√°ticamente
‚îî‚îÄ‚îÄ README.md               # Este archivo de documentaci√≥n


## üß∞ Notas para usuarios de Windows y PowerShell

Si est√°s utilizando Windows con PowerShell y encuentras problemas al ejecutar comandos como `npx`, puede deberse a las pol√≠ticas de seguridad del sistema. Aqu√≠ te dejamos algunos pasos para solucionarlo y poder ejecutar tus tests correctamente con la extensi√≥n de Playwright Test for VS Code:

### üõ†Ô∏è Soluci√≥n para errores de ejecuci√≥n de scripts en PowerShell

Si al usar `npx` recibes un mensaje como:

npx : No se puede cargar el archivo ... porque la ejecuci√≥n de scripts est√° deshabilitada en este sistema.


Ejecuta este comando para permitir temporalmente la ejecuci√≥n de scripts:

```
powershell
Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass
```

Esto habilita la ejecuci√≥n de scripts solo para la sesi√≥n actual y es seguro para desarrollo local.

üì¶ Aseg√∫rate de instalar las dependencias correctamente
Si ves un error como:

"playwright" no se reconoce como un comando interno o externo...

Es probable que Playwright no est√© instalado. Aseg√∫rate de instalarlo as√≠:

npm install -D @playwright/test
npx playwright install


Esto instalar√° la librer√≠a de pruebas y los navegadores necesarios (Chromium, Firefox y WebKit).

Despu√©s de esto, deber√≠as poder correr tus tests desde:

La terminal: npx playwright test

O directamente desde VS Code con el bot√≥n "Run Test" (requiere el plugin instalado)

### Inicializar .env file

üì¶ 1. Instalar dotenv

`npm install dotenv`

üóÇÔ∏è 2. Crear el archivo .env

üåê Configuraci√≥n por Entorno (`.env`)

Este proyecto soporta m√∫ltiples entornos (`qa`, `stage`, `prod`) utilizando archivos `.env` separados, por ejemplo:

- `.env.qa`
- `.env.stage`
- `.env.prod`

cada archivo tendra sus respectivas variables
```
STANDARD_USER=standard_user
PASSWORD=secret_sauce
BASE_URL=https://www.saucedemo.com
```
La selecci√≥n del entorno se realiza a trav√©s de la variable `ENV`. Un archivo de utilidad llamado `loadEnv.ts` se encarga de cargar autom√°ticamente el archivo `.env` correspondiente con base en dicha variable.

.env.qa
.env.stage
.env.prod
utils/
‚îî‚îÄ‚îÄ loadEnv.ts

En `loadEnv.ts` se encuentra la l√≥gica que carga el archivo `.env` correcto de forma din√°mica. Este archivo ya est√° importado dentro del archivo `playwright.config.ts`.

```ts
// tests/utils/loadEnv.ts
import * as dotenv from 'dotenv';
import * as path from 'path';

// üö® Requiere definir ENV manualmente
if (!process.env.ENV) {
  throw new Error('‚ùå ENV variable is required. Use ENV=qa|stage|prod');
}

const envFile = `.env.${process.env.ENV}`;
dotenv.config({ path: path.resolve(__dirname, `../${envFile}`) });

console.log(`‚úÖ Using env file: ${envFile}`);
```

---

#### Carga de variables en env.ts

```TS
// tests/utils/env.ts
import './loadEnv';

function getEnvVariable(key: string): string {
  const value = process.env[key];
  if (!value) throw new Error(`‚ùå Environment variable ${key} is missing`);
  return value;
}

export const STANDARD_USER = getEnvVariable('STANDARD_USER');
export const PASSWORD = getEnvVariable('PASSWORD');
export const BASE_URL = getEnvVariable('BASE_URL');
export const LOCKED_OUT_USER = getEnvVariable('LOCKED_OUT_USER');
```

De momento se va a comentar los archivos para evitar problemas con el ejecutor de VSC ya que lo ejecuta dos veces cada test

#### üöÄ Ejecutar Tests seg√∫n el Entorno

Puedes especificar el entorno al correr los tests usando la variable `ENV` antes del comando:

```bash
ENV=qa npx playwright test
ENV=stage npx playwright test
ENV=prod npx playwright test
```

Si no se especifica ENV, por defecto se carga .env.qa.

‚ö†Ô∏è Aseg√∫rate de agregar el archivo .env al .gitignore para no subirlo al repositorio.

Archivos de entorno - nunca deben subirse
.env
.env.*

üß™ 3. Cargar las variables en tu c√≥digo
En cualquier archivo donde necesites usar estas variables, importa y configura dotenv as√≠:

```
import * as dotenv from 'dotenv';
dotenv.config();

// Luego puedes acceder a las variables
const user = process.env.STANDARD_USER;
const password = process.env.PASSWORD;
```


###