# Proyecto de Testing con Playwright

Este proyecto utiliza https://playwright.dev/ para realizar pruebas automatizadas. A continuación, se describen los pasos para configurar el entorno desde cero en Windows y ejecutar un primer test de prueba.

## 🚀 Requisitos previos

Antes de empezar, asegúrate de tener instalado lo siguiente:

- Node.js y npm: https://nodejs.org/ (npm viene incluido con Node.js)
- Visual Studio Code: https://code.visualstudio.com/
- Plugin de VS Code: Playwright Test for VS Code

## 🛠️ Inicialización del Proyecto

1. Inicializa un nuevo proyecto de Playwright

Abre una terminal en la carpeta de tu proyecto y ejecuta:

npm init playwright@latest

Durante la instalación, Playwright te hará algunas preguntas:

- Selecciona el lenguaje (JavaScript o TypeScript)
- Selecciona el entorno (Node.js)
- Elige los navegadores que deseas instalar (Chromium, Firefox, WebKit)
- Si quieres incluir ejemplos de prueba (puedes decir que sí para empezar con algo básico)

2. Abre el proyecto en Visual Studio Code

Asegúrate de tener el plugin “Playwright Test for VS Code” instalado para acceder a funcionalidades como correr pruebas desde la interfaz.

## 🧪 Ejecutar el primer test

Si instalaste los ejemplos, deberías tener un archivo como tests/example.spec.js.

🚀 Para correr las pruebas:

npx playwright test

🚀 También puedes usar el botón “Run Test” en VS Code si tienes el plugin instalado.

🚀 Para correr un test especifico una opcion es indicarle su ruta exacta:

`npx playwright test tests/specs/01-login.spec.ts `

🚀 Playwright permite correr por el título del test:

`npx playwright test -g "should login successfully with standard user"`

🚀 Esto permite escribir una descripcion generica de la suite en el test.describe y asi correr mediante esa descripcion:

test.describe('Login scenarios', () => {
  ...
});

npx playwright test -g "Login scenarios"

🚀 Si quieres correr multiples archivos relacionados con login, puedes organizarlo por carpeta:

tests/
├── login/
│   └── login.spec.ts
├── inventory/
│   └── inventory.spec.ts

npx playwright test tests/login

🚀 Por ultimo si quieres correr los test marcados con .only:

test.only('should login with valid user', async ({ loginPage }) => {
  ...
});

npx playwright test

### Visualizar reporte HTML interactivo

Si quieres ver un reporte visual, corre:
npx playwright show-report

Esto abrirá tu navegador predeterminado con un reporte muy claro de:

- Cada test ejecutado
- Duración
- Screenshots (si los capturas)
- Video (si está configurado)
- Stacktrace en caso de fallos

También puedes acceder manualmente al archivo generado en la carpeta: playwright-report/index.html

### 🌐 Ejecutar los tests solo en Chromium
Por defecto, Playwright ejecuta los tests en Chromium, Firefox y WebKit. Si deseas correr los tests únicamente en Chromium, tienes dos opciones:

#### 🔧 Opción 1: Configurar playwright.config.ts
Abre el archivo playwright.config.ts y reemplaza el bloque projects por el siguiente:

```
import { defineConfig, devices } from '@playwright/test';

export default defineConfig({
  testDir: './tests',
  projects: [
    {
      name: 'chromium',
      use: {
        ...devices['Desktop Chrome'],
      },
    },
  ],
});
```
#### 🖥️ Opción 2: Ejecutar directamente desde CLI
Si prefieres mantener la configuración con varios navegadores, puedes ejecutar tus pruebas en Chromium con el siguiente comando:
npx playwright test --project=chromium

## 👀 Modo Headless vs. Headed

Por defecto, Playwright ejecuta las pruebas en **modo headless**, lo que significa que los navegadores se abren en segundo plano (sin interfaz gráfica visible). Esto hace que las pruebas sean más rápidas y se usen menos recursos.

Si deseas **ver el navegador mientras se ejecutan los tests** (modo headed), puedes desactivar el modo headless con este comando:

``` bash
npx playwright test --headed
```

Esto es útil para depurar visualmente lo que ocurre durante la ejecución.

También puedes configurarlo permanentemente en el archivo playwright.config.ts:

use: {
  headless: false,
}

Nota: Para entornos CI/CD, es recomendable mantener headless: true por eficiencia.

## 📁 Estructura del repositorio

nombre-del-proyecto/
├── tests/                  # Carpeta que contiene los archivos de prueba (.spec.js)
├── playwright.config.js    # Archivo de configuración de Playwright
├── package.json            # Información del proyecto y scripts de npm
├── node_modules/           # Dependencias instaladas automáticamente
└── README.md               # Este archivo de documentación


## 🧰 Notas para usuarios de Windows y PowerShell

Si estás utilizando Windows con PowerShell y encuentras problemas al ejecutar comandos como `npx`, puede deberse a las políticas de seguridad del sistema. Aquí te dejamos algunos pasos para solucionarlo y poder ejecutar tus tests correctamente con la extensión de Playwright Test for VS Code:

### 🛠️ Solución para errores de ejecución de scripts en PowerShell

Si al usar `npx` recibes un mensaje como:

npx : No se puede cargar el archivo ... porque la ejecución de scripts está deshabilitada en este sistema.


Ejecuta este comando para permitir temporalmente la ejecución de scripts:

```
powershell
Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass
```

Esto habilita la ejecución de scripts solo para la sesión actual y es seguro para desarrollo local.

📦 Asegúrate de instalar las dependencias correctamente
Si ves un error como:

"playwright" no se reconoce como un comando interno o externo...

Es probable que Playwright no esté instalado. Asegúrate de instalarlo así:

npm install -D @playwright/test
npx playwright install


Esto instalará la librería de pruebas y los navegadores necesarios (Chromium, Firefox y WebKit).

Después de esto, deberías poder correr tus tests desde:

La terminal: npx playwright test

O directamente desde VS Code con el botón "Run Test" (requiere el plugin instalado)

### 